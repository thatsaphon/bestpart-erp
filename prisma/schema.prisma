// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["views"]
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  first_name String?
  last_name  String?
  role       Role
  password   String
  flag       Json?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  AccountOwner AccountOwner[]
}

enum Role {
  SALES
  BACKOFFICE
  FINANCE
  ADMIN
}

model Document {
  id          Int              @id @default(autoincrement())
  documentNo  String           @unique
  referenceNo String?
  date        DateTime
  Image       SkuMasterImage[]

  contactName    String
  address        String
  phone          String
  taxId          String
  DocumentRemark DocumentRemark[]
  DocumentFile   DocumentFile[]
  type           DocumentType

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  createdBy       String?
  updatedBy       String?
  CustomerOrder   CustomerOrder?
  Quotation       Quotation?
  PurchaseOrder   PurchaseOrder?
  Sales           Sales?
  Purchase        Purchase?
  SalesReturn     SalesReturn?
  PurchaseReturn  PurchaseReturn?
  SalesBill       SalesBill?
  SalesReceived   SalesReceived?
  PurchasePayment PurchasePayment?
  JournalVoucher  JournalVoucher?
  StockAdjustment StockAdjustment?
  OtherInvoice    OtherInvoice?
}

enum DocumentType {
  Sales
  SalesReturn
  SalesBill
  SalesReceived
  Purchase
  PurchaseReturn
  PurchasePayment
  JournalVoucher
  Quotation
  CustomerOrder
  PurchaseOrder
  OtherInvoice
}

model DocumentRemark {
  id Int @id @default(autoincrement())

  Document   Document? @relation(fields: [documentId], references: [id])
  documentId Int?
  remark     String    @default("")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  isDeleted  Boolean   @default(false)
}

model ChartOfAccount {
  id            Int             @id
  name          String
  type          AccountType
  GeneralLedger GeneralLedger[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt

  AccountOwner              AccountOwner[]
  AssetTypeToChartOfAccount AssetTypeToChartOfAccount?

  isCash      Boolean @default(false)
  isAr        Boolean @default(false)
  isAp        Boolean @default(false)
  isInputTax  Boolean @default(false)
  isOutputTax Boolean @default(false)

  ServiceAndNonStockItem ServiceAndNonStockItem[]
}

enum AccountType {
  Assets
  Liabilities
  Equity
  Revenue
  Expense
  OtherIncome
  OtherExpense
}

model GeneralLedger {
  id               Int              @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount   @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  amount           Float
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  Sales            Sales?           @relation(fields: [salesId], references: [id])
  SalesReturn      SalesReturn?     @relation(fields: [salesReturnId], references: [id])
  SalesReceived    SalesReceived?   @relation(fields: [salesReceivedId], references: [id])
  Purchase         Purchase?        @relation(fields: [purchaseId], references: [id])
  PurchaseReturn   PurchaseReturn?  @relation(fields: [purchaseReturnId], references: [id])
  PurchasePayment  PurchasePayment? @relation(fields: [purchasePaymentId], references: [id])
  JournalVoucher   JournalVoucher?  @relation(fields: [journalVoucherId], references: [id])
  OtherInvoice     OtherInvoice?    @relation(fields: [otherInvoiceId], references: [id])

  salesId           Int?
  salesReturnId     Int?
  purchaseId        Int?
  purchaseReturnId  Int?
  salesReceivedId   Int?
  purchasePaymentId Int?
  journalVoucherId  Int?
  otherInvoiceId    Int?

  @@index([chartOfAccountId])
}

model Contact {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  phone   String
  taxId   String?

  credit        Boolean?
  searchKeyword String?

  isAr Boolean @default(true)
  isAp Boolean @default(false)

  SkuMaster SkuMaster[] @relation("SkuMasterToVendor")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Sales           Sales[]
  SalesReturn     SalesReturn[]
  SalesBill       SalesBill[]
  SalesReceived   SalesReceived[]
  Purchase        Purchase[]
  PurchaseReturn  PurchaseReturn[]
  PurchasePayment PurchasePayment[]
  CustomerOrder   CustomerOrder[]
  Quotation       Quotation[]
  PurchaseOrder   PurchaseOrder[]
  OtherInvoice    OtherInvoice[]
}

model MainSku {
  id         Int     @id @default(autoincrement())
  partNumber String?
  name       String  @unique

  MainSkuRemark MainSkuRemark[]
  searchKeyword String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  SkuMaster SkuMaster[]
}

model SkuMaster {
  id     Int    @id @default(autoincrement())
  detail String

  SkuMasterRemark SkuMasterRemark[]

  mainSkuId Int
  MainSku   MainSku @relation(fields: [mainSkuId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Image               SkuMasterImage[]
  GoodsMaster         GoodsMaster[]
  Vendor              Contact[]             @relation("SkuMasterToVendor")
  SalesItem           SalesItem[]
  SalesReturnItem     SalesReturnItem[]
  PurchaseItem        PurchaseItem[]
  PurchaseReturnItem  PurchaseReturnItem[]
  StockAdjustmentItem StockAdjustmentItem[]

  SkuRemainingCache SkuRemainingCache?
  PurchaseOrderItem PurchaseOrderItem[]
  QuotationItem     QuotationItem[]
  canNegative       Boolean             @default(false)

  @@index([mainSkuId])
}

model SkuRemainingCache {
  id   Int      @id @default(autoincrement())
  date DateTime

  SkuMaster   SkuMaster @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int       @unique

  remaining     Float   @default(0)
  shouldRecheck Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MainSkuRemark {
  id   Int    @id @default(autoincrement())
  name String @unique

  MainSku MainSku[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SkuMasterRemark {
  id   Int    @id @default(autoincrement())
  name String @unique

  SkuMaster SkuMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GoodsMaster {
  id              Int       @id @default(autoincrement())
  barcode         String    @unique
  SkuMaster       SkuMaster @relation(fields: [skuMasterId], references: [id])
  skuMasterId     Int
  quantityPerUnit Float
  unit            String
  pricePerUnit    Float
  flag            Json?

  SalesItem    SalesItem[]
  PurchaseItem PurchaseItem[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  PurchaseOrderItem  PurchaseOrderItem[]
  QuotationItem      QuotationItem[]
  SalesReturnItem    SalesReturnItem[]
  PurchaseReturnItem PurchaseReturnItem[]

  @@index([skuMasterId])
}

model Sales {
  id            Int             @id @default(autoincrement())
  Document      Document        @relation(fields: [documentId], references: [id])
  documentId    Int             @unique
  SalesItem     SalesItem[]
  Contact       Contact?        @relation(fields: [contactId], references: [id])
  contactId     Int?
  GeneralLedger GeneralLedger[]

  SalesBill       SalesBill?     @relation(fields: [salesBillId], references: [id])
  salesBillId     Int?
  SalesReceived   SalesReceived? @relation(fields: [salesReceivedId], references: [id])
  salesReceivedId Int?
}

enum SalesStatus {
  Unpaid
  Paid
  Partial
  Billed
}

model SalesItem {
  id                       Int                     @id @default(autoincrement())
  Sales                    Sales                   @relation(fields: [salesId], references: [id])
  salesId                  Int
  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  name            String?
  description     String?
  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity     Float
  pricePerUnit Float
  vat          Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
  @@index([goodsMasterId])
}

model ServiceAndNonStockItem {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int

  canSales        Boolean
  canPurchase     Boolean
  canOtherInvoice Boolean

  SalesItem          SalesItem[]
  SalesReturnItem    SalesReturnItem[]
  PurchaseItem       PurchaseItem[]
  PurchaseReturnItem PurchaseReturnItem[]
  QuotationItem      QuotationItem[]
  PurchaseOrderItem  PurchaseOrderItem[]
}

model SalesReturn {
  id              Int               @id @default(autoincrement())
  Document        Document          @relation(fields: [documentId], references: [id])
  documentId      Int               @unique
  SalesReturnItem SalesReturnItem[]
  Contact         Contact?          @relation(fields: [contactId], references: [id])
  contactId       Int?
  SalesBill       SalesBill?        @relation(fields: [salesBillId], references: [id])
  salesBillId     Int?
  GeneralLedger   GeneralLedger[]
  SalesReceived   SalesReceived?    @relation(fields: [salesReceivedId], references: [id])
  salesReceivedId Int?
}

model SalesReturnItem {
  id                       Int                     @id @default(autoincrement())
  SalesReturn              SalesReturn             @relation(fields: [salesReturnId], references: [id])
  salesReturnId            Int
  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  name            String?
  description     String?
  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity     Float
  pricePerUnit Float
  vat          Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
  @@index([goodsMasterId])
}

model SalesBill {
  id              Int            @id @default(autoincrement())
  Document        Document       @relation(fields: [documentId], references: [id])
  documentId      Int            @unique
  Contact         Contact        @relation(fields: [contactId], references: [id])
  contactId       Int
  Sales           Sales[]
  SalesReturn     SalesReturn[]
  SalesReceived   SalesReceived? @relation(fields: [salesReceivedId], references: [id])
  salesReceivedId Int?
}

model SalesReceived {
  id            Int             @id @default(autoincrement())
  Document      Document        @relation(fields: [documentId], references: [id])
  documentId    Int             @unique
  Contact       Contact         @relation(fields: [contactId], references: [id])
  contactId     Int
  Sales         Sales[]
  SalesReturn   SalesReturn[]
  SalesBill     SalesBill[]
  GeneralLedger GeneralLedger[]

  amount Float
}

model Purchase {
  id         Int      @id @default(autoincrement())
  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique
  Contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  Int?

  PurchaseItem      PurchaseItem[]
  GeneralLedger     GeneralLedger[]
  PurchasePayment   PurchasePayment? @relation(fields: [purchasePaymentId], references: [id])
  purchasePaymentId Int?
}

model PurchaseItem {
  id                       Int                     @id @default(autoincrement())
  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  name            String?
  description     String?
  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity    Float
  costPerUnit Float
  vat         Float

  Purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId Int

  vatable Boolean @default(true)

  @@index([skuMasterId])
  @@index([goodsMasterId])
}

model PurchaseReturn {
  id         Int      @id @default(autoincrement())
  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique

  Contact            Contact?             @relation(fields: [contactId], references: [id])
  contactId          Int?
  PurchaseReturnItem PurchaseReturnItem[]
  GeneralLedger      GeneralLedger[]
  PurchasePayment    PurchasePayment?     @relation(fields: [purchasePaymentId], references: [id])
  purchasePaymentId  Int?
}

model PurchaseReturnItem {
  id                       Int                     @id @default(autoincrement())
  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  name            String?
  description     String?
  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity    Float
  costPerUnit Float
  vat         Float

  PurchaseReturn   PurchaseReturn @relation(fields: [purchaseReturnId], references: [id])
  purchaseReturnId Int

  vatable Boolean @default(true)

  @@index([skuMasterId])
  @@index([goodsMasterId])
}

model PurchasePayment {
  id             Int              @id @default(autoincrement())
  Document       Document         @relation(fields: [documentId], references: [id])
  documentId     Int              @unique
  Contact        Contact          @relation(fields: [contactId], references: [id])
  contactId      Int
  Purchase       Purchase[]
  PurchaseReturn PurchaseReturn[]
  GeneralLedger  GeneralLedger[]

  amount Float
}

model StockAdjustment {
  id                  Int                   @id @default(autoincrement())
  Document            Document              @relation(fields: [documentId], references: [id])
  documentId          Int                   @unique
  StockAdjustmentItem StockAdjustmentItem[]
}

model StockAdjustmentItem {
  id                Int             @id @default(autoincrement())
  SkuMaster         SkuMaster       @relation(fields: [skuMasterId], references: [id])
  skuMasterId       Int
  StockAdjustment   StockAdjustment @relation(fields: [stockAdjustmentId], references: [id])
  stockAdjustmentId Int

  quantity      Float
  estimatedCost Float
}

model JournalVoucher {
  id            Int             @id @default(autoincrement())
  Document      Document        @relation(fields: [documentId], references: [id])
  documentId    Int             @unique
  GeneralLedger GeneralLedger[]
  AssetMovement AssetMovement[]
}

model AccountOwner {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  User             User           @relation(fields: [userId], references: [id])
  userId           String

  @@index([chartOfAccountId])
  @@index([userId])
}

model SkuMasterImage {
  id          String     @id @default(uuid())
  path        String
  Document    Document?  @relation(fields: [documentId], references: [id])
  SkuMaster   SkuMaster? @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int?
  documentId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}

model DocumentFile {
  id         Int      @id @default(autoincrement())
  url        String
  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model OtherInvoice {
  id         Int      @id @default(autoincrement())
  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique
  Contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  Int?

  OtherInvoiceItem OtherInvoiceItem[]
  GeneralLedger    GeneralLedger[]
}

model OtherInvoiceItem {
  id             Int          @id @default(autoincrement())
  OtherInvoice   OtherInvoice @relation(fields: [otherInvoiceId], references: [id])
  otherInvoiceId Int

  AssetMovement AssetMovement?

  amount Float
}

enum AssetType {
  Land
  Buildings
  Equipment
  Vehicles
  Furniture
  Computers_And_Electronics
  Intangible_Assets
}

model Asset {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  type            AssetType
  acquisitionDate DateTime
  usefulLife      Int?
  cost            Float
  residualValue   Float     @default(0)
  remark          String
  isWriteOff      Boolean   @default(false)

  AssetMovement AssetMovement[]
  AssetFile     AssetFile[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
}

model AssetFile {
  id      Int    @id @default(autoincrement())
  Asset   Asset  @relation(fields: [assetId], references: [id])
  assetId Int
  url     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AssetTypeToChartOfAccount {
  id               Int            @id @default(autoincrement())
  AssetType        AssetType
  chartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int            @unique
}

model AssetMovement {
  id   Int      @id @default(autoincrement())
  date DateTime

  Asset   Asset @relation(fields: [assetId], references: [id])
  assetId Int

  OtherInvoiceItem   OtherInvoiceItem? @relation(fields: [otherInvoiceItemId], references: [id])
  otherInvoiceItemId Int?              @unique
  JournalVoucher     JournalVoucher?   @relation(fields: [journalVoucherId], references: [id])
  journalVoucherId   Int?

  value Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Knowledge {
  id             Int              @id @default(autoincrement())
  content        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  KnowledgeImage KnowledgeImage[]
}

model KnowledgeImage {
  id          String    @id @default(uuid())
  path        String
  Knowledge   Knowledge @relation(fields: [knowledgeId], references: [id])
  knowledgeId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  Document          Document        @relation(fields: [documentId], references: [id])
  documentId        Int             @unique
  CustomerOrderLink CustomerOrder[]

  Contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  PurchaseOrderItem PurchaseOrderItem[]
}

enum PurchaseOrderStatus {
  Open
  Partial
  Closed
}

model PurchaseOrderItem {
  id Int @id @default(autoincrement())

  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity    Float
  costPerUnit Float
  vat         Float

  estimatedDeliveryDate DateTime

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
}

model CustomerOrder {
  id Int @id @default(autoincrement())

  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique
  Contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  Int

  status CustomerOrderStatus

  PurchasOrderLink PurchaseOrder[]

  deposit Float

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  CustomerOrderItem CustomerOrderItem[]
}

enum CustomerOrderStatus {
  Open
  Ordered
  Received
  Closed
  Cancelled
}

model CustomerOrderItem {
  id Int @id @default(autoincrement())

  CustomerOrder   CustomerOrder @relation(fields: [customerOrderId], references: [id])
  customerOrderId Int

  barcode         String?
  description     String
  unit            String
  quantityPerUnit Float   @default(1)
  quantity        Float
  price           Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Quotation {
  id Int @id @default(autoincrement())

  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique

  Contact   Contact? @relation(fields: [contactId], references: [id])
  contactId Int?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  QuotationItem QuotationItem[]
}

model QuotationItem {
  id Int @id @default(autoincrement())

  Quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId Int

  GoodsMaster              GoodsMaster?            @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId            Int?
  SkuMaster                SkuMaster?              @relation(fields: [skuMasterId], references: [id])
  skuMasterId              Int?
  ServiceAndNonStockItem   ServiceAndNonStockItem? @relation(fields: [serviceAndNonStockItemId], references: [id])
  serviceAndNonStockItemId Int?

  barcode         String?
  unit            String?
  quantityPerUnit Float   @default(1)
  description     String?

  quantity Float
  price    Float
  vat      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

view StockMovement {
  documentId   String       @id
  documentNo   String
  skuMasterId  Int
  date         DateTime
  documentType DocumentType
  quantity     Float
  costPerUnit  Float
  pricePerUnit Float
}
