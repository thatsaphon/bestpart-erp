// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  first_name String?
  last_name  String?
  role       Role
  password   String
  flag       Json?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  AccountOwner AccountOwner[]
}

enum Role {
  SALES
  BACKOFFICE
  FINANCE
  ADMIN
}

model Document {
  id            Int             @id @default(autoincrement())
  documentId    String          @unique
  date          DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  SkuOut        SkuOut[]
  SkuIn         SkuIn[]
  ApSubledger   ApSubledger?
  ArSubledger   ArSubledger?
  Image         Image[]
  GeneralLedger GeneralLedger[]

  contactName String
  address     String
  phone       String
  taxId       String
  remark      String @default("")
}

model ChartOfAccount {
  id            Int             @id
  name          String
  type          AccountType
  GeneralLedger GeneralLedger[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt

  AccountOwner AccountOwner[]
}

enum AccountType {
  Assets
  Liabilities
  Equity
  Revenue
  Expense
  OtherIncome
  OtherExpense
}

model GeneralLedger {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  amount           Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  GeneralLedger    Document[]

  @@index([chartOfAccountId])
}

model Contact {
  id      Int       @id @default(autoincrement())
  name    String
  Address Address[]
  taxId   String?

  ApSubledger   ApSubledger[]
  ArSubledger   ArSubledger[]
  credit        Boolean?
  searchKeyword String?

  isAr Boolean @default(true)
  isAp Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Address {
  id           Int     @id @default(autoincrement())
  Contact      Contact @relation(fields: [contactId], references: [id])
  contactId    Int
  isMain       Boolean
  name         String
  addressLine1 String  @default("")
  addressLine2 String  @default("")
  addressLine3 String  @default("")
  taxId        String  @default("")
  phone        String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
}

model MainSku {
  id         Int     @id @default(autoincrement())
  partNumber String?
  name       String  @unique

  carModelId Int?

  CarModel      CarModel? @relation(fields: [carModelId], references: [id])
  searchKeyword String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  SkuMaster SkuMaster[]

  @@index([carModelId])
}

model SkuMaster {
  id     Int    @id @default(autoincrement())
  detail String

  Brand   Brand? @relation(fields: [brandId], references: [id])
  brandId Int?

  mainSkuId Int
  mainSku   MainSku @relation(fields: [mainSkuId], references: [id])
  remark    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Image       Image[]
  GoodsMaster GoodsMaster[]
  SkuIn       SkuIn[]
  SkuOut      SkuOut[]

  @@index([brandId])
  @@index([mainSkuId])
}

model CarModel {
  id   Int    @id @default(autoincrement())
  name String

  MainSku MainSku[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  SkuMaster SkuMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GoodsMaster {
  id          Int       @id @default(autoincrement())
  barcode     String    @unique
  SkuMaster   SkuMaster @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int
  quantity    Float
  unit        String
  price       Float
  flag        Json?

  SkuOut SkuOut[]
  SkuIn  SkuIn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}

model SkuOut {
  id            Int         @id @default(autoincrement())
  date          DateTime
  Document      Document    @relation(fields: [documentId], references: [id])
  documentId    Int
  GoodsMaster   GoodsMaster @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId Int
  SkuMaster     SkuMaster   @relation(fields: [skuMasterId], references: [id])

  barcode         String
  unit            String
  quantityPerUnit Float  @default(1)

  quantity Float
  cost     Float
  price    Float
  vat      Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  skuMasterId Int

  @@index([skuMasterId])
  @@index([goodsMasterId])
  @@index([documentId])
}

model SkuIn {
  id            Int         @id @default(autoincrement())
  date          DateTime
  Document      Document    @relation(fields: [documentId], references: [id])
  documentId    Int
  GoodsMaster   GoodsMaster @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId Int
  SkuMaster     SkuMaster   @relation(fields: [skuMasterId], references: [id])
  skuMasterId   Int

  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity Float
  cost     Float
  vat      Float

  remaining Int

  @@index([documentId])
  @@index([goodsMasterId])
  @@index([skuMasterId])
}

model ApSubledger {
  id            Int           @id @default(autoincrement())
  Contact       Contact       @relation(fields: [contactId], references: [id])
  contactId     Int
  Document      Document      @relation(fields: [documentId], references: [id])
  documentId    Int           @unique
  paymentStatus PaymentStatus @default(NotPaid)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

model ArSubledger {
  id            Int           @id @default(autoincrement())
  Contact       Contact       @relation(fields: [contactId], references: [id])
  contactId     Int
  Document      Document      @relation(fields: [documentId], references: [id])
  documentId    Int           @unique
  paymentStatus PaymentStatus @default(NotPaid)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

enum PaymentStatus {
  Cash
  Paid
  NotPaid  @map("Not Paid")
  WriteOff @map("Write Off")
  Billed
}

model AccountOwner {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  User             User           @relation(fields: [userId], references: [id])
  userId           String

  @@index([chartOfAccountId])
  @@index([userId])
}

model Image {
  id          String     @id @default(uuid())
  path        String
  Document    Document?  @relation(fields: [documentId], references: [id])
  SkuMaster   SkuMaster? @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int?
  documentId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}
