// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  first_name String?
  last_name  String?
  role       Role
  password   String
  flag       Json?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  accountOwners AccountOwner[]
}

enum Role {
  USER
  ADMIN
}

model Document {
  id              Int            @id @default(autoincrement())
  documentId      String         @unique
  date            DateTime
  generalLedger   GeneralLedger? @relation(fields: [generalLedgerId], references: [id])
  generalLedgerId Int
  skuMovements    SkuMovement[]
  arSubledger     ArSubledger[]
  apSubledger     ApSubledger[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt

  @@index([generalLedgerId])
}

model ChartOfAccount {
  id            Int             @id
  name          String
  type          AccountType
  GeneralLedger GeneralLedger[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt

  accountOwners AccountOwner[]
}

enum AccountType {
  Assets
  Liabilities
  Equity
  Revenue
  Expense
  OtherIncome
  OtherExpense
}

model GeneralLedger {
  id               Int            @id @default(autoincrement())
  document         Document[]
  chartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  amount           Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@index([chartOfAccountId])
}

model Contact {
  id        Int       @id @default(autoincrement())
  name      String
  Addresses Address[]
  flag      Json?
  taxId     String

  apSubledger ApSubledger[]
  arSubledger ArSubledger[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Address {
  id           Int     @id @default(autoincrement())
  contact      Contact @relation(fields: [contactId], references: [id])
  contactId    Int
  isMain       Boolean
  name         String
  addressLine1 String?
  addressLine2 String?
  phone        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
}

model MainSku {
  id         Int     @id @default(autoincrement())
  partNumber String?
  name       String  @unique

  carModel   CarModel? @relation(fields: [carModelId], references: [id])
  carModelId Int?

  flag       Json?
  skuMasters SkuMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([carModelId])
}

model SkuMaster {
  id     Int    @id @default(autoincrement())
  detail String

  brand   Brand? @relation(fields: [brandId], references: [id])
  brandId Int?

  mainSkuId Int
  mainSku   MainSku @relation(fields: [mainSkuId], references: [id])
  remark    String?

  goodsMasters GoodsMaster[]
  skuMovements SkuMovement[]

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([brandId])
  @@index([mainSkuId])
}

model CarModel {
  id   Int    @id @default(autoincrement())
  name String

  mainSkus MainSku[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  skuMasters SkuMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GoodsMaster {
  id       Int       @id @default(autoincrement())
  barcode  String    @unique
  sku      SkuMaster @relation(fields: [skuId], references: [id])
  skuId    Int
  quantity Float
  unit     String
  price    Float
  flag     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuId])
}

model SkuMovement {
  id         Int       @id @default(autoincrement())
  date       DateTime
  sku        SkuMaster @relation(fields: [skuId], references: [id])
  skuId      Int
  goodsCode  String
  document   Document  @relation(fields: [documentId], references: [id])
  documentId Int

  quantity  Int
  cost      Float
  sellPrice Float
  vat       Float

  flag Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuId])
  @@index([documentId])
}

model ApSubledger {
  id         Int      @id @default(autoincrement())
  ap         Contact  @relation(fields: [contactId], references: [id])
  contactId  Int
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

model ArSubledger {
  id         Int      @id @default(autoincrement())
  ar         Contact  @relation(fields: [contactId], references: [id])
  contactId  Int
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

model AccountOwner {
  id              Int            @id @default(autoincrement())
  accountNumber   ChartOfAccount @relation(fields: [accountNumberId], references: [id])
  accountNumberId Int
  user            User           @relation(fields: [userId], references: [id])
  userId          String

  @@index([accountNumberId])
  @@index([userId])
}

model Image {
  id          String     @id @default(uuid())
  path        String
  skuMasterId Int?
  skuMaster   SkuMaster? @relation(fields: [skuMasterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}
