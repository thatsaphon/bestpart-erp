// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  first_name String?
  last_name  String?
  role       Role
  password   String
  flag       Json?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  AccountOwner AccountOwner[]
}

enum Role {
  SALES
  BACKOFFICE
  FINANCE
  ADMIN
}

model Document {
  id            Int              @id @default(autoincrement())
  documentNo    String           @unique
  referenceNo   String?
  date          DateTime
  SkuOut        SkuOut[]
  SkuIn         SkuIn[]
  ApSubledger   ApSubledger?
  ArSubledger   ArSubledger?
  Image         SkuMasterImage[]
  GeneralLedger GeneralLedger[]

  contactName  String
  address      String
  phone        String
  taxId        String
  remark       DocumentRemark[]
  DocumentFile DocumentFile[]
  type         DocumentType     @default(Sales)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  createdBy     String?
  updatedBy     String?
  AssetMovement AssetMovement[]
}

enum DocumentType {
  Sales
  Purchase
  BillingNote
  Received
  Payment
  OtherInvoice
}

model DocumentRemark {
  id Int @id @default(autoincrement())

  Document   Document? @relation(fields: [documentId], references: [id])
  documentId Int?
  remark     String    @default("")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  isDeleted  Boolean   @default(false)
}

model ChartOfAccount {
  id            Int             @id
  name          String
  type          AccountType
  GeneralLedger GeneralLedger[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt

  AccountOwner              AccountOwner[]
  AssetTypeToChartOfAccount AssetTypeToChartOfAccount?
}

enum AccountType {
  Assets
  Liabilities
  Equity
  Revenue
  Expense
  OtherIncome
  OtherExpense
}

model GeneralLedger {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  amount           Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  Document         Document[]

  @@index([chartOfAccountId])
}

model Contact {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  phone   String
  taxId   String?

  ApSubledger   ApSubledger[]
  ArSubledger   ArSubledger[]
  credit        Boolean?
  searchKeyword String?

  isAr Boolean @default(true)
  isAp Boolean @default(false)

  SkuMaster SkuMaster[] @relation("SkuMasterToVendor")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MainSku {
  id         Int     @id @default(autoincrement())
  partNumber String?
  name       String  @unique

  remark        MainSkuRemark[]
  searchKeyword String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  SkuMaster SkuMaster[]
}

model SkuMaster {
  id     Int    @id @default(autoincrement())
  detail String

  remark SkuMasterRemark[]

  mainSkuId Int
  mainSku   MainSku @relation(fields: [mainSkuId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Image       SkuMasterImage[]
  GoodsMaster GoodsMaster[]
  SkuIn       SkuIn[]
  SkuOut      SkuOut[]
  Vendor      Contact[]        @relation("SkuMasterToVendor")

  @@index([mainSkuId])
}

model MainSkuRemark {
  id   Int    @id @default(autoincrement())
  name String @unique

  MainSku MainSku[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SkuMasterRemark {
  id   Int    @id @default(autoincrement())
  name String @unique

  SkuMaster SkuMaster[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model GoodsMaster {
  id          Int       @id @default(autoincrement())
  barcode     String    @unique
  SkuMaster   SkuMaster @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int
  quantity    Float
  unit        String
  price       Float
  flag        Json?

  SkuOut SkuOut[]
  SkuIn  SkuIn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}

model SkuOut {
  id            Int         @id @default(autoincrement())
  date          DateTime
  Document      Document    @relation(fields: [documentId], references: [id])
  documentId    Int
  GoodsMaster   GoodsMaster @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId Int
  SkuMaster     SkuMaster   @relation(fields: [skuMasterId], references: [id])

  barcode         String
  unit            String
  quantityPerUnit Float  @default(1)

  quantity Float
  cost     Float
  price    Float
  vat      Float

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  skuMasterId Int
  SkuInToOut  SkuInToOut[]

  @@index([skuMasterId])
  @@index([goodsMasterId])
  @@index([documentId])
}

model SkuIn {
  id            Int         @id @default(autoincrement())
  date          DateTime
  Document      Document    @relation(fields: [documentId], references: [id])
  documentId    Int
  GoodsMaster   GoodsMaster @relation(fields: [goodsMasterId], references: [id])
  goodsMasterId Int
  SkuMaster     SkuMaster   @relation(fields: [skuMasterId], references: [id])
  skuMasterId   Int

  barcode         String?
  unit            String
  quantityPerUnit Float   @default(1)

  quantity Float
  cost     Float
  vat      Float

  SkuInToOut SkuInToOut[]

  @@index([documentId])
  @@index([goodsMasterId])
  @@index([skuMasterId])
}

model SkuInToOut {
  id       Int    @id @default(autoincrement())
  SkuIn    SkuIn  @relation(fields: [skuInId], references: [id])
  skuInId  Int
  SKuOut   SkuOut @relation(fields: [skuOutId], references: [id])
  skuOutId Int

  quantity Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ApSubledger {
  id            Int           @id @default(autoincrement())
  Contact       Contact       @relation(fields: [contactId], references: [id])
  contactId     Int
  Document      Document      @relation(fields: [documentId], references: [id])
  documentId    Int           @unique
  paymentStatus PaymentStatus @default(NotPaid)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

model ArSubledger {
  id            Int           @id @default(autoincrement())
  Contact       Contact       @relation(fields: [contactId], references: [id])
  contactId     Int
  Document      Document      @relation(fields: [documentId], references: [id])
  documentId    Int           @unique
  paymentStatus PaymentStatus @default(NotPaid)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([contactId])
  @@index([documentId])
}

enum PaymentStatus {
  Cash
  Paid
  PartialPaid
  NotPaid     @map("Not Paid")
  WriteOff    @map("Write Off")
  Billed
}

model AccountOwner {
  id               Int            @id @default(autoincrement())
  ChartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int
  User             User           @relation(fields: [userId], references: [id])
  userId           String

  @@index([chartOfAccountId])
  @@index([userId])
}

model SkuMasterImage {
  id          String     @id @default(uuid())
  path        String
  Document    Document?  @relation(fields: [documentId], references: [id])
  SkuMaster   SkuMaster? @relation(fields: [skuMasterId], references: [id])
  skuMasterId Int?
  documentId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([skuMasterId])
}

model DocumentFile {
  id         Int      @id @default(autoincrement())
  url        String
  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum AssetType {
  Land
  Buildings
  Equipment
  Vehicles
  Furniture
  Computers_And_Electronics
  Intangible_Assets
}

model AssetRegistration {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  type            AssetType
  acquisitionDate DateTime
  usefulLife      Int?
  remark          String
  isWriteOff      Boolean   @default(false)

  AssetMovement             AssetMovement[]
  AssetRegistrationDocument AssetRegistrationDocument[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
}

model AssetRegistrationDocument {
  id                  Int               @id @default(autoincrement())
  AssetRegistration   AssetRegistration @relation(fields: [assetRegistrationId], references: [id])
  assetRegistrationId Int
  url                 String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AssetTypeToChartOfAccount {
  id               Int            @id @default(autoincrement())
  AssetType        AssetType
  chartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId Int            @unique
}

model AssetMovement {
  id   Int      @id @default(autoincrement())
  date DateTime

  AssetRegistration   AssetRegistration @relation(fields: [assetRegistrationId], references: [id])
  assetRegistrationId Int

  Document   Document @relation(fields: [documentId], references: [id])
  documentId Int

  value Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
